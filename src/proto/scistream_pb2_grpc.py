# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.scistream_pb2 as scistream__pb2


class ControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.req = channel.unary_unary(
                '/scistream.Control/req',
                request_serializer=scistream__pb2.Request.SerializeToString,
                response_deserializer=scistream__pb2.Response.FromString,
                )
        self.update = channel.unary_unary(
                '/scistream.Control/update',
                request_serializer=scistream__pb2.UpdateTargets.SerializeToString,
                response_deserializer=scistream__pb2.Response.FromString,
                )
        self.release = channel.unary_unary(
                '/scistream.Control/release',
                request_serializer=scistream__pb2.Release.SerializeToString,
                response_deserializer=scistream__pb2.Response.FromString,
                )
        self.hello = channel.unary_unary(
                '/scistream.Control/hello',
                request_serializer=scistream__pb2.Hello.SerializeToString,
                response_deserializer=scistream__pb2.AppResponse.FromString,
                )


class ControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def req(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def release(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'req': grpc.unary_unary_rpc_method_handler(
                    servicer.req,
                    request_deserializer=scistream__pb2.Request.FromString,
                    response_serializer=scistream__pb2.Response.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=scistream__pb2.UpdateTargets.FromString,
                    response_serializer=scistream__pb2.Response.SerializeToString,
            ),
            'release': grpc.unary_unary_rpc_method_handler(
                    servicer.release,
                    request_deserializer=scistream__pb2.Release.FromString,
                    response_serializer=scistream__pb2.Response.SerializeToString,
            ),
            'hello': grpc.unary_unary_rpc_method_handler(
                    servicer.hello,
                    request_deserializer=scistream__pb2.Hello.FromString,
                    response_serializer=scistream__pb2.AppResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scistream.Control', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Control(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def req(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scistream.Control/req',
            scistream__pb2.Request.SerializeToString,
            scistream__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scistream.Control/update',
            scistream__pb2.UpdateTargets.SerializeToString,
            scistream__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def release(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scistream.Control/release',
            scistream__pb2.Release.SerializeToString,
            scistream__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scistream.Control/hello',
            scistream__pb2.Hello.SerializeToString,
            scistream__pb2.AppResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
