Network Working Group                                           F. Junior
Internet-Draft                                               SciStream Team
Intended status: Informational                              April 15, 2025
Expires: October 17, 2025


        SciStream: Protocol Specification for Data Streaming Between Facilities
                          draft-scistream-protocol-01

Abstract

   The SciStream Protocol allows a third-party client to control how incoming packets are
   translated and forwarded by a Network gateway such as Network Address Translator,
   simple firewall or load-balancer. Additionally it provides a mechanism for
   data plane security via the use of ephemeral credentials per session.
/// Sciency
   Scistreams enables a zero-trust end-to-end secure data streaming session
   management between a data producer and consumer in separated untrusted
   facilities. This protocol is designed for scientific facilities
   with strict security requirement to enable integrated research
   initiatives such as real-time data analysis and experimental steering
   when processing requirements exceeds their local capacity.


Table of Contents

   1. Introduction ....................................................3
      1.1. Motivation.................................................4
      1.2. Problem Statement..........................................4
      1.3. SciStream Solution.........................................5
   2. Terminology ....................................................6
   3. Protocol Overview ..............................................7
      3.1. Architecture Components ...................................7
         3.1.1. SciStream User Client (S2UC) .........................7
         3.1.2. SciStream Control Server (S2CS) ......................8
         3.1.3. SciStream Data Server (S2DS) .........................9
         3.1.4. Application Controllers ..............................9
      3.2. Deployment Models ........................................10
         3.2.1. Science DMZ Integration .............................10
         3.2.2. HPC Facility Integration ............................11
      3.3. Protocol Flow ............................................11
         3.3.1. Resource Negotiation ................................12
         3.3.2. Request Submission ..................................12
         3.3.3. Hello Message Exchange ..............................13
         3.3.4. Connection Establishment ............................14
         3.3.5. Data Streaming ......................................14
         3.3.6. Request Release .....................................15
   4. Protocol Messages .............................................15
      4.1. Message Definitions ......................................15
         4.1.1. Request Message .....................................15
         4.1.2. Response Message ....................................16
         4.1.3. Hello Message .......................................16
         4.1.4. AppResponse Message .................................17
         4.1.5. UpdateTargets Message ...............................17
         4.1.6. Release Message .....................................17
      4.2. Service Definition .......................................18
      4.3. Protocol Buffer Schema ...................................18
   5. Security Framework ............................................19
      5.1. Security Model ...........................................19
      5.2. Authentication Mechanisms ................................20
         5.2.1. Control Channel Authentication ......................20
         5.2.2. Data Channel Authentication .........................21
         5.2.3. Globus Auth Integration ............................21
      5.3. Protection Mechanisms ....................................22
         5.3.1. Data Integrity Protection ...........................22
         5.3.2. Data Confidentiality Protection .....................23
         5.3.3. Protection Levels ...................................23
      5.4. Cross-Domain Security ....................................24
   6. Performance Considerations ....................................24
      6.1. Memory Buffer Management .................................25
      6.2. Parallel Streaming Channels ..............................25
      6.3. Adaptive Rate Control ....................................26
   7. Implementation Considerations .................................26
      7.1. Protocol Buffer Serialization ............................26
      7.2. gRPC Service Communication ...............................27
      7.3. Error Handling ..........................................27
      7.4. Interoperability ........................................28
         7.4.1. Streaming Library Compatibility .....................28
         7.4.2. Network Stack Compatibility .........................28
   8. Error Codes and Status Messages ...............................29
   9. References ...................................................30
      9.1. Normative References ....................................30
      9.2. Informative References ..................................30

1. Motivation
/// Sciency
   Scientific instrument facilities generate data at unprecedented
   rates. Use cases such as real-time data analysis and experimental steering
   need to be processed in at remote computing facilities due to local
   computational limitations.

/// Networking
   Traditional file-based transfer methods introduce
   unacceptable latencies for real-time analysis, as they require writing to disk
   at the source, transferring the file, and reading from disk at the destination.
   This imposes bottlenecks on the producer rates as well as consumer rates.

/// An argument could be made that the networking requirements won't change
/// Sciency/networking

2. Introduction

  The SciStream Protocol allows a third-party client
  to control how incoming data flows are forwarded by an upstream device
  such as Network Address Translator, simple firewall or load-balancer.
  Additionally it provides a mechanism for data channel security via the use of
  ephemeral credentials per session.

  SciStream is designed to be implemented in the context of computing facilities
  APIs that require secure streaming and service registration as well as
  instrument facilities that need to communicate with these computing facilities.
  Zero-trust architecture security paradigms have been used to implement security
  mechanisms in both control and data channels.

    This document specifies the components, messages, and procedures
    involved in the SciStream Protocol, focusing on the control plane
    behavior and data plane security specifications.

    Scistream shares some high level similarities with the Port Control Protocol(PCP RFC6887).
    However PCP lacks in security aspects, PCP relies primarily on source address
    validation which is vulnerable to spoofing and replay attacks.
    It was also not designed for Cross-domain support and is vulnerable to
    eavesdropping of its control messages. FTP security extensions (RFC 2228)
    addresses control channel vulnerabilities but it's vulnerable to data channel
    hijacking, such vulnerability is addressed later on by GridFTP and this
    data plane robustness heavily inspired our mechanisms.


2. Terminology

   Facility
      A network security domain such as scientific instrument facility or
      computing center where scistream components are deployed.
   Scistream Control server
      Service running at each facility that manages local resources. It exposes the
      Scistream Control API. It supports user authentication via OAUTH2.0.
      responds to REQUESTS, HELLO, UPDATE messages.
   Scistream Data Server
      Component that implements the data plane behavior of Scistream.
      Currently tightly coupled with Scistream Control Server. (Could be another API)
      Current reference implementation works as a proxy but this is not strict.
   Data Producer Application:
      A host behind the scistream data server. This is the host that will receive
      inbound traffic resulting from a Scistream request.
      This host listens for a TCP SYN if when using TCP.
   Data Consumer Application
      A host behind the scistream data server. this is the host that initiates the outbound connection.
   UID
      Unique identifier for a specific request
   Inbound receiver
      Scistream data server receiving inbound traffic to be forwarded to the data producer.
      Inbound proxy listens only accepts authenticated connections via TLS1.2
      and PSK implementation using UID. It then forwards data to the producer
   Outbound sender
      Scistream data server sending outbound traffic to the inbound receiver
      so it can then be forwarded to the data producer.
      Outbound proxy establishes a TLS tunnel with the Inbound proxy using the
      UID as a PSK.
   Internal Application address
      The internal IP address of a Data producer or Data Consumer that will communicate
      with scistream.
   External Application address
      The external IP-port tuple referent to a specific application.
      External address is generally public routable.
   Remote peer address:
      Address of a remote peer as seen by the internal host.
   Scistream Client
      Software component responsible for communicating with Scistream Control servers
      Client works as a third-party authorizer of the data channel streams composed
      by the producer and consumer apps. The client is the consumer of the Scistream API.
      It's responsible for user authentication before the request message.
   Mapping, Port mapping:
      Similar to NAT, Scistream creates map between tuple of (internal IP address,port)
      to a (external ip address, port) tuple. The underlying behavior of Scistream could vary.
      We could work as a NAT, firewall or loadbalancer.
      Specifically, our current reference implementation terminates
      the connection in case of TCP it then encapsulates the payload into a
      new connection using TLS.

4. Scistream Security Model

    Scistream provides an abstract mechanism for authentication and authorization of
    data streams, inbound and outbound from a security domain.

4.1 Control Channel security

    Authentication between Scistream Client and Scistream Control Server is based
    on OAUTH2.0 access tokens. This allows for delegation of authority but can
    also be considered an external dependency. Failure could cause unavailability.

    Control channel security is implemented via TLS, scistream server digital
    certificates can be verified by the scistream clients.

    Scistream client identities can be verified via OAUTH2.0 and federated
    identity management is supported. Our reference implementation implements Globus Auth.

    The OAUTH2.0 process works the following way.
      1. user requests OAUTH2.0 token, this token represents identity and authorized permissions(scopes)
      2. Scistream client securely stores this token and includes in the authorization header
      of all Scistream requests sent to a Scistream Control Server
      3. Scistream Control server validates tokens with Globus Auth before processing a request

4.2 Data Channel Security

    Authentication between Scistream Data Servers is based on a shared secret the UID.
    This is used as a PSK for the TLS Tunnel establishment.
    This is a simple yet effective mechanism.

    Authentication between Data Applications and Scistream Data servers is OPTIONAL.
    This als orelies on the UID as a shared secret for the TLS tunnel establishment.

    The data channel authentication process works as follows:

    1. S2UC generates a unique UID for each request.

    2. The user provides this UID to both producer and consumer application
       controllers.

    3. Application controllers include the UID in their Hello messages
       to S2CS.

    4. S2CS validates the UID against its record of active requests.

    5. If the UID is valid, S2CS accepts the Hello message and proceeds
       with the connection setup. If not, S2CS returns an authentication
       error.

    Authentication between S2DS instances is based on PSK-TLS
    authentication. This provides strong authentication for the data transport layer.

    The security model addresses several threat vectors:

    - Unauthorized access to control services
    - Eavesdropping on control messages
    - Tampering with control messages
    - Impersonation of legitimate components
    - Unauthorized access to data streams
    - Eavesdropping on data streams
    - Tampering with data streams
    - Replay attacks
    - Cross-domain security policy violations


 5.3. Protection Mechanisms

    SciStream provides mechanisms for protecting both control messages
    and data streams against eavesdropping and tampering.

 5.3.1. Data Integrity Protection

    Data integrity protection ensures that messages and data streams are
    not altered in transit. SciStream provides the following integrity
    protection mechanisms:

    1. Control Channel Integrity: gRPC over TLS provides integrity
       protection for all control messages between S2UC and S2CS.

    2. Data Channel Integrity: S2DS implementations MAY provide configurable
       integrity protection for data streams. Options include:

       - TLS-based integrity protection
       - Message Authentication Codes (MACs)
       - Digital signatures

    The level of integrity protection for data streams can be configured
    based on the sensitivity of the data and the performance requirements.

 5.3.2. Data Confidentiality Protection

    Data confidentiality protection ensures that messages and data streams
    cannot be read by unauthorized parties. SciStream provides the
    following confidentiality protection mechanisms:

    1. Control Channel Confidentiality: gRPC over TLS provides
       confidentiality protection for all control messages between S2UC
       and S2CS.

    2. Data Channel Confidentiality: S2DS implementations MAY provide
       configurable confidentiality protection for data streams. Options
       include:

       - TLS-based encryption
       - Application-layer encryption

    The level of confidentiality protection for data streams can be
    configured based on the sensitivity of the data and the performance
    requirements




4.3 Service Registration

5. Protocol Messages

  Our current reference implementation uses Protocol Buffers for message definition
  and gRPC for service communication. This section details the message
  formats and service definitions.

5.1. Message Definitions
  - REQUEST: Sent by S2UC to S2CS to authorize a streaming
  - HELLO: Sent by appcontroller/Scistream client to register the remote_ip and port
  - UPDATE: Sent by S2UC to S2CS to update destination targets after Hello messages
  - RELEASE: sent to S2CS to terminate a streaming session and release resources
  - RESPONSE: sent by S2CS in response to request and update commands
  - APPRESPONSE: sent by S2CS in response to HELLO commands

5.2 Message definition
    ```
    message Request {
        string uid = 1;     // Unique identifier for the request
        string role = 2;    // Role
        int32 num_conn = 3; // Number of connections requested
        int32 rate = 4;     // NOT_IMPLEMENTED
    }

    message Hello {
        string uid = 1;                   // Request identifier
        repeated string prod_listeners = 2; // Producer listener endpoints
        string role = 3;                  // This is used to identify the role of the proxy in the TLS authentication
    }

    message UpdateTargets {
        string uid = 1;                     // Request identifier
        repeated string remote_listeners = 2; // Remote endpoints to connect to
        string role = 3;                    // Role (PROD or CONS)
    }

    message Release {
        string uid = 1; // Request identifier to release
    }

    ```
    ```
    message AppResponse {
        string message = 1;           // Status message
        repeated string listeners = 2; // Available listener endpoints
    }
    message Response {
        repeated string listeners = 1;     // Available listener endpoints
        repeated string prod_listeners = 2; // Producer listener endpoints
    }
    ```
6 Scistream components

6.1. SciStream Data Server (S2DS)

   The S2DS functions as gateway between the internal network and the external WAN.
   It is responsible for the actual data movement between facilities.
   The S2DS performs the following functions:

   - Forwards data from producers to consumers
   - Manages network connections and bandwidth
   - Provides data buffering if needed
   - Reports status to the S2CS
   - Implements security protections for data streams
   - Optimizes memory buffer management for high throughput
   - Supports parallel streams for performance scaling

   Multiple implementations of S2DS are supported, including a custom
   SciStream implementation and commercial-grade proxies like Nginx and
   HAProxy. Each implementation MUST support the security requirements
   specified by S2CS.

   S2DS MUST authenticate all connections according to the security
   policies established by S2CS. For external connections (between
   facilities), S2DS SHOULD use TLS + PSK authentication. For internal
   connections, S2DS MAY use ingress-filtering
   based on authorized ip addresses.

6.2 Application controllers

    Application controllers may or may not interface directly with the applications.
    They perform the following functions:

    - Send Hello messages to S2CS with connection details
    - Receive connection information from S2CS
    - Configure applications for data streaming (OPTIONAL)
    - Monitor streaming status (OPTIONAL)
    - Implement security protocols for application authentication (OPTIONAL)

    Application controllers MUST authenticate with S2CS using UID AND OAUTH2.0.
    They are responsible for configuring the applications to use the appropriate
    security settings for data streams.

    Application controllers MAY be integrated directly into ProdApp and
    ConsApp, or MAY be implemented as separate components that communicate
    with the applications via local interfaces.

    7.4. Interoperability

    7.4.1. Streaming Library Compatibility

       SciStream is designed to be agnostic to the specific streaming libraries
       used by applications. Implementations should consider:

       - Transport-layer transparency to support any protocol over TCP
       - Support for common streaming libraries (ZeroMQ, RabbitMQ, etc.)
       - Minimal interference with application-level protocols
       - Testing with a variety of streaming libraries to ensure compatibility
       - Documentation of any known compatibility issues

       This approach minimizes the modifications required to existing
       scientific applications.

       End-to-end data channel security can be implemented if the streaming library
       supports PSK-based TLS connections.
