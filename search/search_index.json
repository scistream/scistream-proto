{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Scistream enables high-speed memory-to-memory data streaming in scientific environments. We have a python implementation and a deployment solution compatible with docker and kubernetes. If you want to learn more about Scistream, please take a look at our HPDC'22 paper . Documentation Getting started User Guide Developer Guide Benchmarks About Project layout poetry.lock # Explicitly documents all Python dependencies using Poetry pyproject.toml # Python dependencie: Poetry equivalent to requirements.txt mkdocs.yml # Documentation configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. deploy/ setup.sh # Installation script src/ proto/ # GRPC protocol specifications appcontroller.py # Application controller reference implementations s2cs.py # Scistream Control Server implementation s2ds.py # Scistream Dataplane server plugin s2uc.py # Scistream User Client implementation utils.py # Supporting code ... # other files tests/ test_s2cs.py # pytest tests ... # other tests Service The protocol should enable high-speed, memory-to-memory data streaming in scientific environments by establishing streaming data channels between two remote facilities using our reference architecture: ![alt text](figures/simple-arch.png \"SciStream architecture\") Buffer-and-forward elements are run at the Science DMZ to create bridges between the Ethernet-based WAN and HPC interconnets where data producers/consumers may reside. Software components * **SciStream Data Server (S2DS):** software that runs on gateway nodes. It acts as a buffer-and-forward agent. * **SciStream User Client (S2UC):** software that the end user and/or workflow engines/tools acting on behalf of the user interact with and provide relevant information (e.g., ID of a HPC job, ID of an experiment or data acquisition job on a scientific instrument, shared secret for secure communication with the user job (application) at the producer and consumer) to orchestrate end-to-end data streaming. * **SciStream Control Server (S2CS):** a software running on one of the gateway nodes. It interacts with S2UC, data producer/consumer and S2DS. Environment * S2UC communicates with producer/consumer S2CS over a private LAN/WAN or the Internet * S2CS and S2DS communicate over a LAN * Messages can be lost or corrupted Vocabulary of Messages * **Requests:** { REQ, ReqListeners } * **Responses:** { RESP, ProdLstn } * **Commands:** { StartLstn, Hello, UpdateTargets, StartConn, Connect, REL } Procedure Rules (Informal) 0. The user selects producer and consumer facilities, and authenticates with them via S2UC. 1. S2UC establishes an authenticated connection to (both producer and consumer) S2CS, and sends the \u201cuser request\u201d (REQ) for the streaming job (which contains unique-id, protocol, number of connections, streaming rate, producer address and consumer address) 2. S2CS requests num_conn ports from S2DS, whom reserves num_conn ports on gateway nodes depending on availability 3. Both producer and consumer S2CS send connection information (i.e., IP addresses and ports) for data connections to S2UC 4. When ProdApp starts, it connects to producer S2CS and presents the \u201cunique-id\u201d and set of port listeners 5. Prod S2CS forwards set of port listeners to S2UC 6. S2UC creates connection map and data connection credentials, and sends them to both producer and consumer S2CS 7. Both producer and consumer S2DS create bridges between Prod/Cons App and the WAN (i.e., start buffer-and-forward elements) 8. ConsApp establishes num_conn data streaming channels 9. Both S2DS use data connection credentials to establish external (WAN) streaming channel 10. ProdApp starts streaming task Collaboration Diagram ![alt text](figures/collaboration-diagram.png \"SciStream collaboration diagram\") Sequence Diagram ![alt text](figures/scistream-protocol-simple.png \"SciStream sequence diagram\")","title":"Index"},{"location":"#index","text":"Scistream enables high-speed memory-to-memory data streaming in scientific environments. We have a python implementation and a deployment solution compatible with docker and kubernetes. If you want to learn more about Scistream, please take a look at our HPDC'22 paper .","title":"Index"},{"location":"#documentation","text":"Getting started User Guide Developer Guide Benchmarks About","title":"Documentation"},{"location":"#project-layout","text":"poetry.lock # Explicitly documents all Python dependencies using Poetry pyproject.toml # Python dependencie: Poetry equivalent to requirements.txt mkdocs.yml # Documentation configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. deploy/ setup.sh # Installation script src/ proto/ # GRPC protocol specifications appcontroller.py # Application controller reference implementations s2cs.py # Scistream Control Server implementation s2ds.py # Scistream Dataplane server plugin s2uc.py # Scistream User Client implementation utils.py # Supporting code ... # other files tests/ test_s2cs.py # pytest tests ... # other tests","title":"Project layout"},{"location":"#service","text":"The protocol should enable high-speed, memory-to-memory data streaming in scientific environments by establishing streaming data channels between two remote facilities using our reference architecture: ![alt text](figures/simple-arch.png \"SciStream architecture\") Buffer-and-forward elements are run at the Science DMZ to create bridges between the Ethernet-based WAN and HPC interconnets where data producers/consumers may reside.","title":"Service"},{"location":"#software-components","text":"* **SciStream Data Server (S2DS):** software that runs on gateway nodes. It acts as a buffer-and-forward agent. * **SciStream User Client (S2UC):** software that the end user and/or workflow engines/tools acting on behalf of the user interact with and provide relevant information (e.g., ID of a HPC job, ID of an experiment or data acquisition job on a scientific instrument, shared secret for secure communication with the user job (application) at the producer and consumer) to orchestrate end-to-end data streaming. * **SciStream Control Server (S2CS):** a software running on one of the gateway nodes. It interacts with S2UC, data producer/consumer and S2DS.","title":"Software components"},{"location":"#environment","text":"* S2UC communicates with producer/consumer S2CS over a private LAN/WAN or the Internet * S2CS and S2DS communicate over a LAN * Messages can be lost or corrupted","title":"Environment"},{"location":"#vocabulary-of-messages","text":"* **Requests:** { REQ, ReqListeners } * **Responses:** { RESP, ProdLstn } * **Commands:** { StartLstn, Hello, UpdateTargets, StartConn, Connect, REL }","title":"Vocabulary of Messages"},{"location":"#procedure-rules-informal","text":"0. The user selects producer and consumer facilities, and authenticates with them via S2UC. 1. S2UC establishes an authenticated connection to (both producer and consumer) S2CS, and sends the \u201cuser request\u201d (REQ) for the streaming job (which contains unique-id, protocol, number of connections, streaming rate, producer address and consumer address) 2. S2CS requests num_conn ports from S2DS, whom reserves num_conn ports on gateway nodes depending on availability 3. Both producer and consumer S2CS send connection information (i.e., IP addresses and ports) for data connections to S2UC 4. When ProdApp starts, it connects to producer S2CS and presents the \u201cunique-id\u201d and set of port listeners 5. Prod S2CS forwards set of port listeners to S2UC 6. S2UC creates connection map and data connection credentials, and sends them to both producer and consumer S2CS 7. Both producer and consumer S2DS create bridges between Prod/Cons App and the WAN (i.e., start buffer-and-forward elements) 8. ConsApp establishes num_conn data streaming channels 9. Both S2DS use data connection credentials to establish external (WAN) streaming channel 10. ProdApp starts streaming task","title":"Procedure Rules (Informal)"},{"location":"#collaboration-diagram","text":"![alt text](figures/collaboration-diagram.png \"SciStream collaboration diagram\")","title":"Collaboration Diagram"},{"location":"#sequence-diagram","text":"![alt text](figures/scistream-protocol-simple.png \"SciStream sequence diagram\")","title":"Sequence Diagram"},{"location":"quickstart/","text":"Quickstart SciStream Control Protocol The SciStream protocol attempts to tackle the problem of enabling high-speed, memory-to-memory data streaming in scientific environments. This task is particularly challenging because data producers (e.g., data acquisition applications on scientific instruments, simulations on supercomputers) and consumers (e.g., data analysis applications) may be in different security domains (and thus require bridging of those domains). Furthermore, either producers, consumers, or both may lack external network connectivity (and thus require traffic forwarding proxies). If you want to learn more, please take a look at our HPDC'22 paper . Pre-requisites We use poetry to manage our python environments. Please ensure you have Python 3.9+ and poetry installed in your environment. We require docker for using the Haproxy and NGINX S2DS implementation. We provide a setup scrit that was used to install these dependencies on the Fabric platform. This installation script was tested on ubuntu 20.04 version. We also use a Git submodules to manage dependencies, such as the original S2DS implementation project. To set up the SciStream Data Server (S2DS) submodule, run the following commands: git submodule init git submodule update cd scistream/S2DS make cd ../../ This process initializes, updates, and compiles the submodule, streamlining your project setup and ensuring compatibility with the latest version of the parent project. Quick Start Once you have the dependencies the following commands download and installs all the necessary python dependencies. It also activates the virtual environment. poetry install poetry shell ~~~~ The easiest way to verify if the code works is to run pytest: poetry run pytest The output of the test should look like this: ========================================== test session starts ========================================== platform linux -- Python 3.9.16, pytest-7.2.2, pluggy-1.0.0 rootdir: /home/fcastro/dev/scistream-proto plugins: timeout-2.1.0 collected 6 items tests/test_s2cs.py .x.... [100%] ===================================== 5 passed, 1 xfailed in 5.81s ====================================== Once this runs all the ## Tutorial ### Authentication We integrated with globus platform for the purpose of authentication. If your token expired you might want to start by logging out. $ python src/s2uc.py logout After that let's log in: $ python src/s2uc.py login You will see a URL. You need to open the url provided in a web browser, log in with the proper credentials, then copy and paste the authorization code into the cli prompt. (scistream-proto-py3.9) bash-3.2$ python src/s2uc.py login Please authenticate with Globus here: ------------------------------------ https://auth.globus.org/v2/oauth2/authorize?client_id=4787c84e-9c55-a11c&redirect_uri=https%3A%2F%2Fauth.globus.org=login ------------------------------------ Enter the resulting Authorization Code here: After logging in you can move to the next tutorial step. ### Running scistream To understand the behavior of the code let's simulate the environment by opening 3 terminals, 1 for the s2cs Producer, 1 for s2cs Consumer, and one for the client terminal. To run this you will need to open multiple terminals: python src/s2cs.py --port=5000 --listener-ip=10.133.137.2 --verbose --type=Haproxy python src/s2uc.py prod-req --s2cs 10.133.137.2:5000 python src/appcontroller.py create-appctrl cac92bb0-7345-11ee-9876-bff742c41932 10.130.134.2:5000 AgpQoBo1VvvYkz8yYxyQgkgrW7nobYmG6dno8q8rgKG9MMYDM2IvCjgEezy8mqJpqvMl44GDq5GKayTyvkXn4fdmoB2 PROD 10.133.139.2 python src/s2uc.py cons-req --s2cs 10.130.134.2:5000 cac92bb0-7345-11ee-9876-bff742c41932 10.133.137.2:5001 python src/appcontroller.py create-appctrl cac92bb0-7345-11ee-9876-bff742c41932 10.130.134.2:5000 AgpQoBo1VvvYkz8yYxyQgkgrW7nobYmG6dno8q8rgKG9MMYDM2IvCjgEezy8mqJpqvMl44GDq5GKayTyvkXn4fdmoB2 CONS 10.130.133.2 Several things will happen in the background to learn more please review the code. The output of the client should look like this: listeners: \"0.0.0.0:43579\" listeners: \"0.0.0.0:34375\" listeners: \"0.0.0.0:34343\" listeners: \"0.0.0.0:38223\" listeners: \"0.0.0.0:34865\" prod_listeners: \"127.0.0.1:7000\" prod_listeners: \"127.0.0.1:17000\" prod_listeners: \"127.0.0.1:27000\" prod_listeners: \"127.0.0.1:37000\" prod_listeners: \"127.0.0.1:47000\" Sending updated connection map information... 82f0e9b8-eb7d-11ed-be3c-f303ca66dd31 In this case 82f0e9b8-eb7d-11ed-be3c-f303ca66dd31 is the uid, let's use that to send a release: $ python src/s2uc.py release 82f0e9b8-eb7d-11ed-be3c-f303ca66dd31 Release completed ## Troubleshooting Guide The first step of troubleshooting is restarting everything with the --verbose flag: python src/s2cs.py start --port=5000 --listener-ip=127.0.0.1 --verbose ~~~ This should output more info, if you continue facing issues please create an issue on github. FAQ Make sure that you start the poetry environment with the correct python version Specification Authentication How to create scopes: CLIENT_ID=\"92c36fec-6d3c-41f6-a487-dfda1281c4e5\" CLIENT_SECRET=\"oDU3/7WgwFU8nAX+Mtsnb4X6UeHBv7KJsA37U1xw6XQ=\" curl -s -u \"$CLIENT_ID:$CLIENT_SECRET\" -H \\ 'Content-Type: application/json' \\ -X POST https://auth.globus.org/v2/api/clients/$CLIENT_ID/scopes \\ -d '{ \"scope\": { \"name\": \"Scistream Operations\", \"description\": \"All Operations on Scistream\", \"scope_suffix\": \"scistream\", \"dependent_scopes\": [ { \"optional\": false, \"requires_refresh_token\": true, \"scope\": \"73320ffe-4cb4-4b25-a0a3-83d53d59ce4f\" } ], \"advertised\": false, \"allow_refresh_tokens\": true } }' | jq","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#scistream-control-protocol","text":"The SciStream protocol attempts to tackle the problem of enabling high-speed, memory-to-memory data streaming in scientific environments. This task is particularly challenging because data producers (e.g., data acquisition applications on scientific instruments, simulations on supercomputers) and consumers (e.g., data analysis applications) may be in different security domains (and thus require bridging of those domains). Furthermore, either producers, consumers, or both may lack external network connectivity (and thus require traffic forwarding proxies). If you want to learn more, please take a look at our HPDC'22 paper .","title":"SciStream Control Protocol"},{"location":"quickstart/#pre-requisites","text":"We use poetry to manage our python environments. Please ensure you have Python 3.9+ and poetry installed in your environment. We require docker for using the Haproxy and NGINX S2DS implementation. We provide a setup scrit that was used to install these dependencies on the Fabric platform. This installation script was tested on ubuntu 20.04 version. We also use a Git submodules to manage dependencies, such as the original S2DS implementation project. To set up the SciStream Data Server (S2DS) submodule, run the following commands: git submodule init git submodule update cd scistream/S2DS make cd ../../ This process initializes, updates, and compiles the submodule, streamlining your project setup and ensuring compatibility with the latest version of the parent project.","title":"Pre-requisites"},{"location":"quickstart/#quick-start","text":"Once you have the dependencies the following commands download and installs all the necessary python dependencies. It also activates the virtual environment. poetry install poetry shell ~~~~ The easiest way to verify if the code works is to run pytest: poetry run pytest The output of the test should look like this: ========================================== test session starts ========================================== platform linux -- Python 3.9.16, pytest-7.2.2, pluggy-1.0.0 rootdir: /home/fcastro/dev/scistream-proto plugins: timeout-2.1.0 collected 6 items tests/test_s2cs.py .x.... [100%] ===================================== 5 passed, 1 xfailed in 5.81s ====================================== Once this runs all the ## Tutorial ### Authentication We integrated with globus platform for the purpose of authentication. If your token expired you might want to start by logging out. $ python src/s2uc.py logout After that let's log in: $ python src/s2uc.py login You will see a URL. You need to open the url provided in a web browser, log in with the proper credentials, then copy and paste the authorization code into the cli prompt. (scistream-proto-py3.9) bash-3.2$ python src/s2uc.py login Please authenticate with Globus here: ------------------------------------ https://auth.globus.org/v2/oauth2/authorize?client_id=4787c84e-9c55-a11c&redirect_uri=https%3A%2F%2Fauth.globus.org=login ------------------------------------ Enter the resulting Authorization Code here: After logging in you can move to the next tutorial step. ### Running scistream To understand the behavior of the code let's simulate the environment by opening 3 terminals, 1 for the s2cs Producer, 1 for s2cs Consumer, and one for the client terminal. To run this you will need to open multiple terminals: python src/s2cs.py --port=5000 --listener-ip=10.133.137.2 --verbose --type=Haproxy python src/s2uc.py prod-req --s2cs 10.133.137.2:5000 python src/appcontroller.py create-appctrl cac92bb0-7345-11ee-9876-bff742c41932 10.130.134.2:5000 AgpQoBo1VvvYkz8yYxyQgkgrW7nobYmG6dno8q8rgKG9MMYDM2IvCjgEezy8mqJpqvMl44GDq5GKayTyvkXn4fdmoB2 PROD 10.133.139.2 python src/s2uc.py cons-req --s2cs 10.130.134.2:5000 cac92bb0-7345-11ee-9876-bff742c41932 10.133.137.2:5001 python src/appcontroller.py create-appctrl cac92bb0-7345-11ee-9876-bff742c41932 10.130.134.2:5000 AgpQoBo1VvvYkz8yYxyQgkgrW7nobYmG6dno8q8rgKG9MMYDM2IvCjgEezy8mqJpqvMl44GDq5GKayTyvkXn4fdmoB2 CONS 10.130.133.2 Several things will happen in the background to learn more please review the code. The output of the client should look like this: listeners: \"0.0.0.0:43579\" listeners: \"0.0.0.0:34375\" listeners: \"0.0.0.0:34343\" listeners: \"0.0.0.0:38223\" listeners: \"0.0.0.0:34865\" prod_listeners: \"127.0.0.1:7000\" prod_listeners: \"127.0.0.1:17000\" prod_listeners: \"127.0.0.1:27000\" prod_listeners: \"127.0.0.1:37000\" prod_listeners: \"127.0.0.1:47000\" Sending updated connection map information... 82f0e9b8-eb7d-11ed-be3c-f303ca66dd31 In this case 82f0e9b8-eb7d-11ed-be3c-f303ca66dd31 is the uid, let's use that to send a release: $ python src/s2uc.py release 82f0e9b8-eb7d-11ed-be3c-f303ca66dd31 Release completed ## Troubleshooting Guide The first step of troubleshooting is restarting everything with the --verbose flag: python src/s2cs.py start --port=5000 --listener-ip=127.0.0.1 --verbose ~~~ This should output more info, if you continue facing issues please create an issue on github.","title":"Quick Start"},{"location":"quickstart/#faq","text":"Make sure that you start the poetry environment with the correct python version","title":"FAQ"},{"location":"quickstart/#specification","text":"","title":"Specification"},{"location":"quickstart/#authentication","text":"How to create scopes: CLIENT_ID=\"92c36fec-6d3c-41f6-a487-dfda1281c4e5\" CLIENT_SECRET=\"oDU3/7WgwFU8nAX+Mtsnb4X6UeHBv7KJsA37U1xw6XQ=\" curl -s -u \"$CLIENT_ID:$CLIENT_SECRET\" -H \\ 'Content-Type: application/json' \\ -X POST https://auth.globus.org/v2/api/clients/$CLIENT_ID/scopes \\ -d '{ \"scope\": { \"name\": \"Scistream Operations\", \"description\": \"All Operations on Scistream\", \"scope_suffix\": \"scistream\", \"dependent_scopes\": [ { \"optional\": false, \"requires_refresh_token\": true, \"scope\": \"73320ffe-4cb4-4b25-a0a3-83d53d59ce4f\" } ], \"advertised\": false, \"allow_refresh_tokens\": true } }' | jq","title":"Authentication"},{"location":"about/Changelog/","text":"Changelog All notable changes to this project will be documented in this file. [Unreleased] [Added] Nginx config template can now setup multiple connections Created ProxyContainer parent class and made Nginx and Haproxy inherit from it. deleted old Nginx implementation Modified s2uc so that it can send an array of ports [Bug] Hardcoded app controller ports for pvapy tests[WIP]","title":"Changelog"},{"location":"about/Changelog/#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"about/Changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"about/Changelog/#added","text":"Nginx config template can now setup multiple connections Created ProxyContainer parent class and made Nginx and Haproxy inherit from it. deleted old Nginx implementation Modified s2uc so that it can send an array of ports","title":"[Added]"},{"location":"about/Changelog/#bug","text":"Hardcoded app controller ports for pvapy tests[WIP]","title":"[Bug]"},{"location":"dev-guide/","text":"Developer Guide Software components SciStream Data Server (S2DS): software that runs on gateway nodes. It acts as a buffer-and-forward agent. SciStream User Client (S2UC): software that the end user and/or workflow engines/tools acting on behalf of the user interact with and provide relevant information (e.g., ID of a HPC job, ID of an experiment or data acquisition job on a scientific instrument, shared secret for secure communication with the user job (application) at the producer and consumer) to orchestrate end-to-end data streaming. SciStream Control Server (S2CS): a software running on one of the gateway nodes. It interacts with S2UC, data producer/consumer and S2DS. S2DS and ProxyContainer Documentation The code consists mainly of the S2DS class and ProxyContainer subclasses, including Haproxy , Nginx , Janus , and DockerSock , which serve to establish and manage the data streaming pipelines using various networking and container technologies. S2DS Class The S2DS class is responsible for managing the lifecycle of S2DS subprocesses, which are the forwarding element of the data streaming . It includes methods for starting subprocesses, managing listener ports, and releasing resources. The start method initiates a specified number of subprocesses, dynamically allocating ports and creating listener addresses. It also handles error conditions gracefully, raising a custom S2DSException when encountering issues. The release and update_listeners methods provide mechanisms for terminating subprocesses and updating connection information, respectively. ProxyContainer and Subclasses The ProxyContainer class and its subclasses ( Haproxy , Nginx , Janus , DockerSock ) are a specific implementation of S2DS and they abstract the complexities of deploying proxy containers to facilitate. These classes are designed to work with different Docker plugins and configurations, allowing for flexible deployment scenarios. Each subclass specifies its own container configuration, including the image name, container name, and configuration file locations. The start method in each class leverages Docker APIs to deploy and manage containers based on the provided configuration. Additionally, the update_listeners method in ProxyContainer demonstrates how to dynamically update listener configurations using Jinja2 templates.","title":"Developer Guide"},{"location":"dev-guide/#developer-guide","text":"","title":"Developer Guide"},{"location":"dev-guide/#software-components","text":"SciStream Data Server (S2DS): software that runs on gateway nodes. It acts as a buffer-and-forward agent. SciStream User Client (S2UC): software that the end user and/or workflow engines/tools acting on behalf of the user interact with and provide relevant information (e.g., ID of a HPC job, ID of an experiment or data acquisition job on a scientific instrument, shared secret for secure communication with the user job (application) at the producer and consumer) to orchestrate end-to-end data streaming. SciStream Control Server (S2CS): a software running on one of the gateway nodes. It interacts with S2UC, data producer/consumer and S2DS.","title":"Software components"},{"location":"dev-guide/#s2ds-and-proxycontainer-documentation","text":"The code consists mainly of the S2DS class and ProxyContainer subclasses, including Haproxy , Nginx , Janus , and DockerSock , which serve to establish and manage the data streaming pipelines using various networking and container technologies.","title":"S2DS and ProxyContainer Documentation"},{"location":"dev-guide/#s2ds-class","text":"The S2DS class is responsible for managing the lifecycle of S2DS subprocesses, which are the forwarding element of the data streaming . It includes methods for starting subprocesses, managing listener ports, and releasing resources. The start method initiates a specified number of subprocesses, dynamically allocating ports and creating listener addresses. It also handles error conditions gracefully, raising a custom S2DSException when encountering issues. The release and update_listeners methods provide mechanisms for terminating subprocesses and updating connection information, respectively.","title":"S2DS Class"},{"location":"dev-guide/#proxycontainer-and-subclasses","text":"The ProxyContainer class and its subclasses ( Haproxy , Nginx , Janus , DockerSock ) are a specific implementation of S2DS and they abstract the complexities of deploying proxy containers to facilitate. These classes are designed to work with different Docker plugins and configurations, allowing for flexible deployment scenarios. Each subclass specifies its own container configuration, including the image name, container name, and configuration file locations. The start method in each class leverages Docker APIs to deploy and manage containers based on the provided configuration. Additionally, the update_listeners method in ProxyContainer demonstrates how to dynamically update listener configurations using Jinja2 templates.","title":"ProxyContainer and Subclasses"},{"location":"user-guide/","text":"User Guide Software components SciStream Data Server (S2DS): software that runs on gateway nodes. It acts as a buffer-and-forward agent. SciStream User Client (S2UC): software that the end user and/or workflow engines/tools acting on behalf of the user interact with and provide relevant information (e.g., ID of a HPC job, ID of an experiment or data acquisition job on a scientific instrument, shared secret for secure communication with the user job (application) at the producer and consumer) to orchestrate end-to-end data streaming. SciStream Control Server (S2CS): a software running on one of the gateway nodes. It interacts with S2UC, data producer/consumer and S2DS. Installation We provide a reference implementation of S2CS and S2DS integrated as a container. To run S2UC you can pip install scistreamclient. WIP To install S2DS and S2CS individually please check our developer guide.","title":"User Guide"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"},{"location":"user-guide/#software-components","text":"SciStream Data Server (S2DS): software that runs on gateway nodes. It acts as a buffer-and-forward agent. SciStream User Client (S2UC): software that the end user and/or workflow engines/tools acting on behalf of the user interact with and provide relevant information (e.g., ID of a HPC job, ID of an experiment or data acquisition job on a scientific instrument, shared secret for secure communication with the user job (application) at the producer and consumer) to orchestrate end-to-end data streaming. SciStream Control Server (S2CS): a software running on one of the gateway nodes. It interacts with S2UC, data producer/consumer and S2DS.","title":"Software components"},{"location":"user-guide/#installation","text":"We provide a reference implementation of S2CS and S2DS integrated as a container. To run S2UC you can pip install scistreamclient. WIP To install S2DS and S2CS individually please check our developer guide.","title":"Installation"},{"location":"user-guide/auth/","text":"Auth Scistream Client Authentication Workflow Let's start from a clean slate by performing a logout: (scistream-proto-py3.9) $ python src/s2uc.py logout Successfully logged out! 1. Simple request with no credentials 1a. Scistream Server Does Not Require Authentication (Default Case) Notice this is the default behavior for the Scistream server, if we do not explicitly specify an authentication scope it will not require authentication. This is the command: (scistream-proto-py3.9)$ python src/s2cs.py --verbose Server started on 0.0.0.0:5000 The client sends the request without needing to login. (scistream-proto-py3.9)$ python src/s2uc.py prod-req uid; s2cs; access_token; role 3bca6862-78f3-11ee-90c6-9801a78d65ff localhost:5000 INVALID_TOKEN PROD waiting for hello message started client request The server processes the request without any authentication error. (scistream-proto-py3.9)$ python src/s2cs.py --verbose Server started on 0.0.0.0:5000 req started, with request uid: \"3bca6862-78f3-11ee-90c6-9801a78d65ff\" role: \"PROD\" num_conn: 5 rate: 10000 Added key: '3bca6862-78f3-11ee-90c6-9801a78d65ff' with entry: {'role': 'PROD', 'num_conn': 5, 'rate': 10000, 'hello_received': <threading.Event object at 0x10ae8e370>, 'prod_listeners': []} 1b. Server Requires Authentication - Failed In this example we explictly specify a client secret, the client secret and client id is uniquely mapped to an authentication scope, and it will validate each request with globus and error on every request that is not authorized for this scope. Notice the server might take some time to start as it connects to Globus Auth. Example: (scistream-proto-py3.9)$ python src/s2cs.py --client_secret=\"CONTACTUSFORTHIS\" --verbose Server started on 0.0.0.0:5000 Client command execution without credentials: (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role 5b0aa168-78fa-11ee-9ad8-9801a78d65ff localhost:5000 INVALID_TOKEN PROD waiting for hello message started client request Please obtain new credentials: Authentication token is invalid for scope c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Server response/error indicating the need for authentication. Authentication token is invalid for scope_id c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Error in function 'req': Traceback (most recent call last): File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 38, in wrapper result = func(*args, **kwargs) File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 69, in decorated_function context.abort(StatusCode.UNAUTHENTICATED, f'Authentication token is invalid for scope {self.client_id}') File \"/Users/flaviojr123/Library/Caches/pypoetry/virtualenvs/scistream-proto-pXNK2Vat-py3.9/lib/python3.9/site-packages/grpc/_server.py\", line 404, in abort raise Exception() Exception req took 0.0009 seconds 2. Successful Login and Credential Verification 2a. User logs into an existing scope (scistream-proto-py3.9)$ python src/s2uc.py login --scope c42c0dac-0a52-408e-a04f-5d31bfe0aef8 To obtain token for the scope, please open the URL in your browser and follow the instructions Please authenticate with Globus here: ------------------------------------ https://auth.globus.org/v2/oauth2/authorize?client_id=4787c84e-9c55-4881-b941-cb6720cea11c&redirect_uri=https%3A%2F%2Fauth.globus.org%2Fv2%2Fweb%2Fauth-code&scope=https%3A%2F%2Fauth.globus.org%2Fscopes%2Fc42c0dac-0a52-408e-a04f-5d31bfe0aef8%2Fscistream&state=_default&response_type=code&code_challenge=lN6qHOyfH9t-D689XoVrCdjUS8RaBvyOZkOBaAuVpmM&code_challenge_method=S256&access_type=offline&prompt=login ------------------------------------ Enter the resulting Authorization Code here: After log in the user can then verify it's local credentials: (scistream-proto-py3.9)$ python src/s2uc.py check-auth Access Token for scope 'c42c0dac-0a52-408e-a04f-5d31bfe0aef8': Agxdy4EWykel6d1r84HoNVdw 2b. Server Requires Authentication - Failed due to IP lookup In this example we explictly specify an authentication scope, and it will validate each request with globus and error on every request that is not authorized for this scope. Example: (scistream-proto-py3.9)$ python src/s2cs.py --client_secret=\"CONTACTUSFORTHIS\" Expected Behavior : - The client sends request, but the client is not configured correctly - The server throws an error indicating that it requires authentication. Notice that in the client request there's a lookup in a configuration file, we get the scope_id from the ip in the s2cs. def get_scope_id(s2cs): scope_map={ \"10.16.42.61\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.41.12\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.42.31\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\" } ip = s2cs.split(\":\")[0] return scope_map.get(ip, \"\") ## When IP is not found error silently, maybe not desirable Client command execution without credentials: (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role 5b0aa168-78fa-11ee-9ad8-9801a78d65ff localhost:5000 INVALID_TOKEN PROD waiting for hello message started client request Please obtain new credentials: Authentication token is invalid for scope c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Server response/error indicating the need for authentication. Authentication token is invalid for scope_id c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Error in function 'req': Traceback (most recent call last): File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 38, in wrapper result = func(*args, **kwargs) File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 69, in decorated_function context.abort(StatusCode.UNAUTHENTICATED, f'Authentication token is invalid for scope {self.client_id}') File \"/Users/flaviojr123/Library/Caches/pypoetry/virtualenvs/scistream-proto-pXNK2Vat-py3.9/lib/python3.9/site-packages/grpc/_server.py\", line 404, in abort raise Exception() Exception req took 0.0009 seconds 2d. Server Requires Authentication - Success To configure this modify the s2uc file: def get_scope_id(s2cs): scope_map={ \"10.16.42.61\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.41.12\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.42.31\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"localhost\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\" } ip = s2cs.split(\":\")[0] return scope_map.get(ip, \"\") If the client is properly configured and we follow the steps above, then everything should work. (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role localhost b87c38b2-798f-11ee-9fa8-9801a78d65ff localhost:5000 Agxdy4EWwGr84HoNVdw PROD waiting for hello message started client request req started, with request uid: \"b87c38b2-798f-11ee-9fa8-9801a78d65ff\" role: \"PROD\" num_conn: 5 rate: 10000 Added key: 'b87c38b2-798f-11ee-9fa8-9801a78d65ff' with entry: {'role': 'PROD', 'num_conn': 5, 'rate': 10000, 'hello_received': <threading.Event object at 0x10e81a3d0>, 'prod_listeners': []} 3. Sending a Command without Relevant Credentials In this scenario, the client tries to send a command to a server without having the required credentials for the server's scope. Server Setup : (scistream-proto-py3.9)$ python src/s2cs.py --client_id=\"26c25f3c-c4b7-4107-8a25-df96898a24fe\" --client_secret=\"=\" (Note: The server is expecting authentication for a particular scope_ID) Client Command : (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role localhost a692c5ac-7990-11ee-a79a-9801a78d65ff localhost:5000 Agxdy484HoNVdw PROD waiting for hello message started client request Please obtain new credentials: Authentication token is invalid for scope 26c25f3c-c4b7-4107-8a25-df96898a24fe (Note: The client is attempting to execute a command without the required credentials for the server's scope) Authentication token is invalid for scope_id 26c25f3c-c4b7-4107-8a25-df96898a24fe Expected Behavior : - The error provides instructions on how to obtain the necessary credentials. - A remote error from the server is received, along with instructions. 4. Logging in to a Second Scope In this scenario, after having logged in to one scope, the client attempts to log in to a second, different scope. The client attempts to log in to the second scope: python src/s2uc.py login --scope 26c25f3c-c4b7-4107-8a25-df96898a24fe Both credentials can be visualized using the appropriate CLI command. python src/s2uc.py check-auth --scope 26c25f3c-c4b7-4107-8a25-df96898a24fe Access Token for scope '26c25f3c-c4b7-4107-8a25-df96898a24fe': AgV3ezP python src/s2uc.py check-auth Access Token for scope 'c42c0dac-0a52-408e-a04f-5d31bfe0aef8': Agxdy4E 5. Sending Commands to Multiple Servers Post Multi-Scope Login Following a successful multi-scope login, the client sends commands to servers associated with both scopes. Server Setup for the First Scope: python src/s2cs.py --client_id=\"26c25f3c-c4b7-4107-8a25-df96898a24fe\" --client_secret=\"=\" --listener-ip=10.0.0.1 Server Setup for the Second Scope: python src/s2cs.py --client_id=\"ca7207c4-c1fd-482f-916d-7997c6e05de2\" --client_secret=\"=\" --listener-ip=10.0.0.2 Client Command to Send to the First Server: python src/s2uc.py prod-req --s2cs 10.0.0.1:5000 Client Command to Send to the Second Server: python src/s2uc.py prod-req --s2cs 10.0.0.2:5000 Scope map: scope_map={ \"10.0.0.1\": \"26c25f3c-c4b7-4107-8a25-df96898a24fe\", \"10.0.0.2\": \"ca7207c4-c1fd-482f-916d-7997c6e05de2\", } Multiple S2DS","title":"Auth"},{"location":"user-guide/auth/#auth","text":"","title":"Auth"},{"location":"user-guide/auth/#scistream-client-authentication-workflow","text":"Let's start from a clean slate by performing a logout: (scistream-proto-py3.9) $ python src/s2uc.py logout Successfully logged out!","title":"Scistream Client Authentication Workflow"},{"location":"user-guide/auth/#1-simple-request-with-no-credentials","text":"","title":"1. Simple request with no credentials"},{"location":"user-guide/auth/#1a-scistream-server-does-not-require-authentication-default-case","text":"Notice this is the default behavior for the Scistream server, if we do not explicitly specify an authentication scope it will not require authentication. This is the command: (scistream-proto-py3.9)$ python src/s2cs.py --verbose Server started on 0.0.0.0:5000 The client sends the request without needing to login. (scistream-proto-py3.9)$ python src/s2uc.py prod-req uid; s2cs; access_token; role 3bca6862-78f3-11ee-90c6-9801a78d65ff localhost:5000 INVALID_TOKEN PROD waiting for hello message started client request The server processes the request without any authentication error. (scistream-proto-py3.9)$ python src/s2cs.py --verbose Server started on 0.0.0.0:5000 req started, with request uid: \"3bca6862-78f3-11ee-90c6-9801a78d65ff\" role: \"PROD\" num_conn: 5 rate: 10000 Added key: '3bca6862-78f3-11ee-90c6-9801a78d65ff' with entry: {'role': 'PROD', 'num_conn': 5, 'rate': 10000, 'hello_received': <threading.Event object at 0x10ae8e370>, 'prod_listeners': []}","title":"1a. Scistream Server Does Not Require Authentication (Default Case)"},{"location":"user-guide/auth/#1b-server-requires-authentication-failed","text":"In this example we explictly specify a client secret, the client secret and client id is uniquely mapped to an authentication scope, and it will validate each request with globus and error on every request that is not authorized for this scope. Notice the server might take some time to start as it connects to Globus Auth. Example: (scistream-proto-py3.9)$ python src/s2cs.py --client_secret=\"CONTACTUSFORTHIS\" --verbose Server started on 0.0.0.0:5000 Client command execution without credentials: (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role 5b0aa168-78fa-11ee-9ad8-9801a78d65ff localhost:5000 INVALID_TOKEN PROD waiting for hello message started client request Please obtain new credentials: Authentication token is invalid for scope c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Server response/error indicating the need for authentication. Authentication token is invalid for scope_id c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Error in function 'req': Traceback (most recent call last): File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 38, in wrapper result = func(*args, **kwargs) File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 69, in decorated_function context.abort(StatusCode.UNAUTHENTICATED, f'Authentication token is invalid for scope {self.client_id}') File \"/Users/flaviojr123/Library/Caches/pypoetry/virtualenvs/scistream-proto-pXNK2Vat-py3.9/lib/python3.9/site-packages/grpc/_server.py\", line 404, in abort raise Exception() Exception req took 0.0009 seconds","title":"1b. Server Requires Authentication - Failed"},{"location":"user-guide/auth/#2-successful-login-and-credential-verification","text":"","title":"2. Successful Login and Credential Verification"},{"location":"user-guide/auth/#2a-user-logs-into-an-existing-scope","text":"(scistream-proto-py3.9)$ python src/s2uc.py login --scope c42c0dac-0a52-408e-a04f-5d31bfe0aef8 To obtain token for the scope, please open the URL in your browser and follow the instructions Please authenticate with Globus here: ------------------------------------ https://auth.globus.org/v2/oauth2/authorize?client_id=4787c84e-9c55-4881-b941-cb6720cea11c&redirect_uri=https%3A%2F%2Fauth.globus.org%2Fv2%2Fweb%2Fauth-code&scope=https%3A%2F%2Fauth.globus.org%2Fscopes%2Fc42c0dac-0a52-408e-a04f-5d31bfe0aef8%2Fscistream&state=_default&response_type=code&code_challenge=lN6qHOyfH9t-D689XoVrCdjUS8RaBvyOZkOBaAuVpmM&code_challenge_method=S256&access_type=offline&prompt=login ------------------------------------ Enter the resulting Authorization Code here: After log in the user can then verify it's local credentials: (scistream-proto-py3.9)$ python src/s2uc.py check-auth Access Token for scope 'c42c0dac-0a52-408e-a04f-5d31bfe0aef8': Agxdy4EWykel6d1r84HoNVdw","title":"2a. User logs into an existing scope"},{"location":"user-guide/auth/#2b-server-requires-authentication-failed-due-to-ip-lookup","text":"In this example we explictly specify an authentication scope, and it will validate each request with globus and error on every request that is not authorized for this scope. Example: (scistream-proto-py3.9)$ python src/s2cs.py --client_secret=\"CONTACTUSFORTHIS\" Expected Behavior : - The client sends request, but the client is not configured correctly - The server throws an error indicating that it requires authentication. Notice that in the client request there's a lookup in a configuration file, we get the scope_id from the ip in the s2cs. def get_scope_id(s2cs): scope_map={ \"10.16.42.61\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.41.12\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.42.31\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\" } ip = s2cs.split(\":\")[0] return scope_map.get(ip, \"\") ## When IP is not found error silently, maybe not desirable Client command execution without credentials: (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role 5b0aa168-78fa-11ee-9ad8-9801a78d65ff localhost:5000 INVALID_TOKEN PROD waiting for hello message started client request Please obtain new credentials: Authentication token is invalid for scope c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Server response/error indicating the need for authentication. Authentication token is invalid for scope_id c42c0dac-0a52-408e-a04f-5d31bfe0aef8 Error in function 'req': Traceback (most recent call last): File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 38, in wrapper result = func(*args, **kwargs) File \"/Users/flaviojr123/dev/argonne/scistream-proto/src/utils.py\", line 69, in decorated_function context.abort(StatusCode.UNAUTHENTICATED, f'Authentication token is invalid for scope {self.client_id}') File \"/Users/flaviojr123/Library/Caches/pypoetry/virtualenvs/scistream-proto-pXNK2Vat-py3.9/lib/python3.9/site-packages/grpc/_server.py\", line 404, in abort raise Exception() Exception req took 0.0009 seconds","title":"2b. Server Requires Authentication - Failed due to IP lookup"},{"location":"user-guide/auth/#2d-server-requires-authentication-success","text":"To configure this modify the s2uc file: def get_scope_id(s2cs): scope_map={ \"10.16.42.61\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.41.12\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"10.16.42.31\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\", \"localhost\": \"c42c0dac-0a52-408e-a04f-5d31bfe0aef8\" } ip = s2cs.split(\":\")[0] return scope_map.get(ip, \"\") If the client is properly configured and we follow the steps above, then everything should work. (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role localhost b87c38b2-798f-11ee-9fa8-9801a78d65ff localhost:5000 Agxdy4EWwGr84HoNVdw PROD waiting for hello message started client request req started, with request uid: \"b87c38b2-798f-11ee-9fa8-9801a78d65ff\" role: \"PROD\" num_conn: 5 rate: 10000 Added key: 'b87c38b2-798f-11ee-9fa8-9801a78d65ff' with entry: {'role': 'PROD', 'num_conn': 5, 'rate': 10000, 'hello_received': <threading.Event object at 0x10e81a3d0>, 'prod_listeners': []}","title":"2d. Server Requires Authentication - Success"},{"location":"user-guide/auth/#3-sending-a-command-without-relevant-credentials","text":"In this scenario, the client tries to send a command to a server without having the required credentials for the server's scope. Server Setup : (scistream-proto-py3.9)$ python src/s2cs.py --client_id=\"26c25f3c-c4b7-4107-8a25-df96898a24fe\" --client_secret=\"=\" (Note: The server is expecting authentication for a particular scope_ID) Client Command : (scistream-proto-py3.9) $python src/s2uc.py prod-req uid; s2cs; access_token; role localhost a692c5ac-7990-11ee-a79a-9801a78d65ff localhost:5000 Agxdy484HoNVdw PROD waiting for hello message started client request Please obtain new credentials: Authentication token is invalid for scope 26c25f3c-c4b7-4107-8a25-df96898a24fe (Note: The client is attempting to execute a command without the required credentials for the server's scope) Authentication token is invalid for scope_id 26c25f3c-c4b7-4107-8a25-df96898a24fe Expected Behavior : - The error provides instructions on how to obtain the necessary credentials. - A remote error from the server is received, along with instructions.","title":"3. Sending a Command without Relevant Credentials"},{"location":"user-guide/auth/#4-logging-in-to-a-second-scope","text":"In this scenario, after having logged in to one scope, the client attempts to log in to a second, different scope. The client attempts to log in to the second scope: python src/s2uc.py login --scope 26c25f3c-c4b7-4107-8a25-df96898a24fe Both credentials can be visualized using the appropriate CLI command. python src/s2uc.py check-auth --scope 26c25f3c-c4b7-4107-8a25-df96898a24fe Access Token for scope '26c25f3c-c4b7-4107-8a25-df96898a24fe': AgV3ezP python src/s2uc.py check-auth Access Token for scope 'c42c0dac-0a52-408e-a04f-5d31bfe0aef8': Agxdy4E","title":"4. Logging in to a Second Scope"},{"location":"user-guide/auth/#5-sending-commands-to-multiple-servers-post-multi-scope-login","text":"Following a successful multi-scope login, the client sends commands to servers associated with both scopes. Server Setup for the First Scope: python src/s2cs.py --client_id=\"26c25f3c-c4b7-4107-8a25-df96898a24fe\" --client_secret=\"=\" --listener-ip=10.0.0.1 Server Setup for the Second Scope: python src/s2cs.py --client_id=\"ca7207c4-c1fd-482f-916d-7997c6e05de2\" --client_secret=\"=\" --listener-ip=10.0.0.2 Client Command to Send to the First Server: python src/s2uc.py prod-req --s2cs 10.0.0.1:5000 Client Command to Send to the Second Server: python src/s2uc.py prod-req --s2cs 10.0.0.2:5000 Scope map: scope_map={ \"10.0.0.1\": \"26c25f3c-c4b7-4107-8a25-df96898a24fe\", \"10.0.0.2\": \"ca7207c4-c1fd-482f-916d-7997c6e05de2\", }","title":"5. Sending Commands to Multiple Servers Post Multi-Scope Login"},{"location":"user-guide/auth/#multiple-s2ds","text":"","title":"Multiple S2DS"}]}